---
title: "Homework Exercise - Data Visualisation"
author: "Whitney Knopp"
date: "06/19/25"
format: html
toc: TRUE
self-contained: true
execute:
  echo: true
  warning: false
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 0: Load R packages

1.  Add a new code chunk below the three outlined steps for Task 0

2.  Load the `gapminder`, `ggplot2`, and `dplyr` R Packages using the `library()` function

3.  Run the code contained in the code chunk and fix any errors

```{r}
library(gapminder)
library(ggplot2)
library(dplyr)
library(sf)
# library(rnaturalearth)
```

# Task 1: Data import

We are not importing any external data, we will use data from the `gapminder` R Package. The step of "Data import" is listed to remind us of this step in the data science lifecycle.

# Task 2: Data tidying

The data is tidy and we can directly work with it. The step is here as reminder.

# Task 3: Data transformation

## Data for 2007

Follow these steps to filter the gapminder data for the year 2007:

1.  A code chunk has already been created

2.  Start with the `gapminder` object

3.  Add the pipe operator (`|>`) and on a new line use the `filter()` function to narrow down the data for observations of the year 2007

4.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_yr_2007`

5.  Run the code contained in the code chunk and fix any errors

```{r}
gapminder_yr_2007 <- gapminder |> 
  filter(year == 2007)
```

## Median life expectancy and country frequency by continent

Follow these steps to calculate median life expectancy and country frequency by continent:

1.  A code chunk has already been created

2.  Start with the `gapminder_yr_2007` object

3.  Add the pipe operator (`|>`) and on a new line use the `group_by()` function to group the following operations by the variable continent

4.  Add the pipe operator (`|>`) and on a new line use the `summarise()` function to summarise the data for frequency and the median life expectancy

5.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_summary_continent_2007`

6.  Run the code contained in the code chunk and fix any errors

```{r}
gapminder_summary_continent_2007 <- gapminder_yr_2007 |> 
  group_by(continent) |> 
  summarise(
    count = n(),
    lifeExp = median(lifeExp)
  )
```

## Median life expectancy by continent and year

Follow these steps to calculate median life expectancy by continent and year:

1.  A code chunk has already been created

2.  Start with the `gapminder` object

3.  Add the pipe operator (`|>`) and on a new line use the `group_by()` function to group the following operations by the variables continent and year

4.  Add the pipe operator (`|>`) and on a new line use the `summarise()` function to summarise the data for the median life expectancy and name the new column 'lifeExp'

5.  Use the assignment operator (`<-`) to assign the data to an object named `gapminder_summary_continent_year`

6.  Run the code contained in the code chunk and fix any errors

```{r}
gapminder_summary_continent_year <- gapminder |>
  group_by(continent, year) |> 
  summarise(lifeExp = median(lifeExp))
```

# Task 4: Data visualisation

Thank you for working through the previous tasks. I am convinced that you have done a great job, but because my task descriptions aren't always unambiguous, I have imported the data that I would have expected to be created and stored in `gapminder_yr_2007`, `gapminder_summary_continent_2007` and `gapminder_summary_continent_year` at the previous code chunks. This is to ensure that you can work through the following tasks.

1.  Run the code contained in the code chunk

```{r}

library(readr)

gapminder_yr_2007 <- read_rds(here::here("data/gapminder-yr-2007.rds"))

gapminder_summary_continent_2007 <- read_rds(here::here("data/gapminder-summary-continent-2007.rds"))

gapminder_summary_continent_year <- read_rds(here::here("data/gapminder-summary-continent-year.rds"))

```

## Boxplot

1.  Add a new code chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a boxplot with the following aesthetic mappings:

-   continent to the x-axis
-   life expectancy to the y-axis
-   continent to color using the `fill = continent` argument inside `aes()`

3.  Do not display (ignore) the outliers in the plot. **Note: Use a search engine or an AI tool to find the solution and add the link to the solution you have found.**

4.  Run the code contained in the code chunk and fix any errors

I was interested in the difference between removing and not displaying the outliers. After a bit of reading, I found the simple option to not visually display outliers built into the `geom_boxplot` geom in `ggplot` with `outlier.shape = NA`. The argument `outlier.shape = NA` uses the "Tukey" method, which is the same as the IQR method I describe below. The primary difference between my approach and the example is that `outlier.shape = NA` just visually hides the points, it does not remove them from the data set. By comparison, I filtered and created a new data.frame where the outliers were removed (<https://ggplot2.tidyverse.org/reference/geom_boxplot.html>).

I decided to use the interquartile method for removing outliers because this is what we use in my research group data analysis. It works by taking setting upper and lower bounds based on the interquartile range (IQR)(between Q1 and Q1). The upper and lower bounds are `1.5*IQR` greater than Q3 and less than Q1, respectively (<https://online.stat.psu.edu/stat200/lesson/3/3.2>).

```{r gapminder boxplot}

# use IQR method for outlier detection
#calculate Q1 and Q3 and the IQR
q1 <- quantile(gapminder_yr_2007$lifeExp, 0.25)
q3 <- quantile(gapminder_yr_2007$lifeExp, 0.75)
iqr <- q3 - q1

# calculate the upper and lower bounds
upper_bound <- q3 + 1.5 * iqr
lower_bound <- q1 - 1.5 * iqr

# subset the data to remove outliers
gapminder_2007_cleaned <- gapminder_yr_2007 |> 
  subset(gapminder_yr_2007$lifeExp < upper_bound) |> 
  subset(gapminder_yr_2007$lifeExp > lower_bound)

# plot the cleaned data
ggplot(data = gapminder_2007_cleaned, 
       mapping = aes(x = continent,
                         y = lifeExp,
                         fill = continent)) +
  geom_boxplot() +
  labs(title = "Life Expectancy by Continent, 2007",
         subtitle = "Data retrieved from Gapminder",
         x = "Continent",
         y = "Life Expectancy (years)")
```

```{r}
ggplot(data = gapminder_yr_2007,
       mapping = aes(x = continent,
                     y = lifeExp,
                     fill = continent)) +
  geom_boxplot(outlier.shape = NA)
```

5.  What are the data types of the three variables used for aesthetic mappings?

    `x = continent`, the data type is categorical and unordered, the appropriate scale is discrete

    `y = lifeExp`, the life expectancy variable, is continuous, this requires a continuous scale

    `fill = continent`, is also an unordered categorical variable, as it is in `x = continent`, also needing a discrete scale.

## Timeseries plot

1.  Add a new code chunk below

2.  Use the `ggplot()` function and the `gapminder_summary_continent_year` object to create a connected scatterplot (also called timeseries plot) using the `geom_line()` and `geom_point()` functions with the following aesthetic mappings:

-   year to the x-axis
-   life expectancy to the y-axis
-   continent to color using the `color = continent` argument inside `aes()`

3.  Run the code contained in the code chunk and fix any errors

    ```{r timeseries}
    ggplot(data = gapminder_summary_continent_year,
           mapping = aes(x = year,
                         y = lifeExp,
                         color = continent)) + 
      geom_line() + 
      geom_point() + 
      labs(title = "Change in Life Expectancy 1952 to 2007",
             subtitle = "Data retrieved from Gapminder",
             x = "Year",
             y = "Life Expectancy (years)")


    ```

```{r}
ggplot(data = gapminder_summary_continent_year,
       mapping = aes(x = year,
                     y = lifeExp,
                     color = continent)) +
  geom_line() +
  geom_point()
```

## Barplot

### with `geom_col()`

1.  Add a new code chunk below

2.  Use the `ggplot()` function and the `gapminder_summary_continent_2007` object to create a barplot using the `geom_col()` function with the following aesthetic mappings:

-   continent to the x-axis
-   count to the y-axis

3.  Run the code contained in the code chunk and fix any errors

    ```{r barplot geom_col}

    ggplot(data = gapminder_summary_continent_2007,
           mapping = aes(x = continent,
                         y = count,
                         fill = continent)) +
      geom_col(show.legend = FALSE) +
      labs(title = "Countries Per Continent",
             subtitle = "Data retrieved from Gapminder",
             x = "Continent",
             y = "Number")

    ```

```{r}
ggplot(data = gapminder_summary_continent_2007,
       mapping = aes(x = continent,
                     y = count)) +
  geom_col()
```

### with `geom_bar()`

1.  Add a new code chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a barplot using the `geom_bar()` function with the following aesthetic mappings:

-   continent to the x-axis

3.  Run the code contained in the code chunk and fix any errors

    ```{r barplot geom_bar}

    ggplot(data = gapminder_yr_2007,
           mapping = aes(x = continent,
                         fill = continent)) +
      geom_bar(show.legend = FALSE) +
      labs(title = "Countries Per Continent",
             subtitle = "Data retrieved from Gapminder",
             x = "Continent",
             y = "Number")
      
    ```

```{r}
ggplot(data = gapminder_yr_2007,
       mapping = aes(x = continent)) +
  geom_bar()
```

4.  The plot is identical to the plot created with `geom_col()`. Why? What does the `geom_bar()` function do? Write your text here: The function `geom_bar()` makes the height of the bar proportional to the number in each group, therefore it doesn't need a y value. It counts the number of occurrences of each category in continent. In `geom_col()` the bar heights represent a value associated with each category. That is why x and y aesthetics mapping is required, it plots value (number/count) fir each category (continent) (retrieved from R documentation `??geom_bar` ).

## Histogram

1.  Add a new code chunk below

2.  Use the `ggplot()` function and the `gapminder_yr_2007` object to create a histogram using the `geom_histogram()` function with the following aesthetic mappings:

-   life expectancy to the x-axis
-   continent to color using the `fill = continent` argument inside `aes()`

3.  Run the code contained in the code chunk and fix any errors

4.  Inside the `geom_histogram()` function, add the following arguments and values:

-   `col = "grey30"`
-   `breaks = seq(40, 85, 2.5)`

5.  Run the code contained in the code chunk and fix any errors

    ```{r histogram}

    ggplot(data = gapminder_yr_2007,
           mapping = aes(x = lifeExp,
                         fill = continent)) +
      geom_histogram(col = "grey30",
                    breaks = seq(40, 80, 2.5)) +
      labs(title = "Distribution of Life Expenctancy",
             subtitle = "Data retrieved from Gapminder",
             x = "Life Expectancy (years)",
             y = "Count")
      
    ```

```{r}
ggplot(data = gapminder_yr_2007,
       mapping = aes(x = lifeExp, 
                     fill = continent)) +
  geom_histogram(col = "grey30", breaks = seq(40, 85, 2.5))
```

6.  Describe how the `geom_histogram()` function is similar to the `geom_bar()` function.

    The `geom_histogram()` function is similar to the `geom_bar()` function because is counts the frequency of a value over a range (life expectancy). It only requires a single aesthetic to map, x. The y axis is always the count/frequency of a number appearing in the given bins of the histogram.

7.  What happens by adding the 'breaks' argument? Play around with the numbers inside of `seq()` to see what changes. Describe what you observe here:

    The 'breaks' argument in the `geom_histogram()` function changes the bins of the histogram. It can change the range of values and the size of the bins. In the `seq()` function, the first number (40) is the lower bound/starting value, the second number (80) is the upper bound/ending value, and the third number (2.5) is the breaks that create the bins. Changing the third argument in `seq()` changes the bin size, larger numbers make less bins and impacts the count in each bin.

## Scatterplot and faceting

1.  Use the `ggplot()` function and assign `gapminder_yr_2007` to the data argument and create a scatterplot using the `geom_point()` function with the following aesthetic mappings:

-   gdpPercap to the x-axis
-   lifeExp to the y-axis
-   population to the size argument
-   continent to color using the `color = continent` argument inside `aes()`

2.  Run the code contained in the code chunk and fix any errors

3.  Use the variable continent to facet the plot by adding: `facet_wrap(~continent)`

4.  Run the code contained in the code chunk and fix any errors

5.  Describe in your own words what the `facet_wrap()` function does

    The function `facet_wrap()` breaks the single chart into individual plots based on the argument. In this case it creates separate plots for each continent.

6.  Adapt the scaling of the size by adding `scale_size(range = c(2, 12))` on the next line

7.  Run the code contained in the code chunk and fix any errors

8.  Adapt the scaling of the x-axis to log10 by adding `scale_x_log10(labels = scales::label_log(), limits = c(100, 100000))` on the next line

9.  Run the code contained in the code chunk and fix any errors

    ```{r scatterplot}
    ggplot(data = gapminder_yr_2007,
           mapping = aes(x = gdpPercap,
                         y = lifeExp,
                         size = pop,
                         color = continent)) +
      geom_point() + 
      facet_wrap(~continent) + 
      scale_size(range = c(2, 12)) + 
      scale_x_log10(labels = scales::label_log(), limits = c(100, 100000))

    ```

```{r}
ggplot(data = gapminder_yr_2007,
       mapping = aes(x = gdpPercap,
                     y = lifeExp,
                     size = pop,
                     color = continent)) +
  geom_point() +
  facet_wrap(~continent) +
  scale_size(range = c(2, 12)) +
  scale_x_log10(labels = scales::label_log(), limits = c(100, 100000))
```

## Lineplot and faceting

1.  A code chunk with complete code has already been prepared

2.  Run the code contained in the code chunk and fix any errors

3.  Remove the '\#' sign at the line that starts with the `scale_color_manual()` function

4.  What is stored in the `country_colors` object? Find out by executing the object in the Console (type it to the Console and hit enter). Do the same again, but with a question mark `?country_colors`

    The `country_colors` object stores a color for every country with a hex color code. Using the R documentation with `?country_colors`, it shows that there is a color stored for 142 countries and also one for each continent.

5.  Render the document and fix any errors

```{r}
ggplot(data = gapminder,
       mapping = aes(x = year, 
                     y = lifeExp, 
                     group = country, 
                     color = country)) +
  geom_line(lwd = 1, show.legend = FALSE) + 
  facet_wrap(~continent) +
  scale_color_manual(values = country_colors) +
  theme_minimal()
```

## Choropleth Maps

You can also prepare maps with `ggplot2`. It's beyond the scope of the class to teach you the foundations of spatial data in R, but a popular package to work with spatial data is the `sf` (Simple Features) R Package. The `rnaturalearth` R Package facilitates world mapping by making [Natural Earth](https://www.naturalearthdata.com/) map data more easily available to R users.

The code chunk below contains code for a world map that shows countries by income group. To view the map, do the following:

1.  Load the R Packages `sf` and `rnaturalearth` using the `library()` function at the beginning of this file alongside the other loaded R Packages

2.  Run the code contained in the code chunk and fix any errors

3.  Render the document and fix any errors

    I have commented out this section since I am getting errors and I want the document to be able to render.

```{r}
# First, load the required packages at the top of the document:
# library(sf)
# library(rnaturalearth)

# world <- ne_countries(scale = "small", returnclass = "sf")

# world |> 
  # mutate(income_grp = factor(income_grp, ordered = T)) |> 
  # ggplot() + 
  # geom_sf(aes(fill = income_grp)) +
  # theme_void() +
  # theme(legend.position = "top") +
  # labs(fill = "Income Group:") +
  # guides(fill = guide_legend(nrow = 2, byrow = TRUE))
```

The code for the code chunk is taken from here: More here: https://bookdown.org/alhdzsz/data_viz_ir/maps.html

## Working with spatial data in R

If you are interested in working with spatial data in R, then I recommend the following resources for further study:

-   Geocompuation with R - Book: https://geocompr.robinlovelace.net/
-   Simple Features for R - Article: https://r-spatial.github.io/sf/articles/sf1.html
-   tmap: thematic maps in R - R Package: https://r-tmap.github.io/tmap/

# Task 5: Data communication

**In the YAML header (between the three dashes at the top of the document)**

1.  Add your name as the author of this document
2.  Add the date of today
3.  Add a table of contents
4.  Render the document and fix any errors

# Task 6: Complete assignment

## Stage, Commit & Push to GitHub

1.  Open the Git pane in RStudio. It's in the top right corner in a separate tab.
2.  **Stage** your changes by checking appropriate box next to all files (if you select one file with your mouse, you can then highlight them all with Ctrl + A on your keyboard and check all boxes)
3.  Write a meaningful commit message (e.g. "Completed week 3 data visualization homework") in the **Commit message** box
4.  Click **Commit**. Note that every commit needs to have a commit message associated with it.
5.  Click **Push** to send your changes to GitHub.
6.  Go to your wk-03-USERNAME GitHub repo (where USERNAME is your GitHub username) and refresh the page. You should see your commit message next to the updated files.

## Open an issue on GitHub

Once you have ensured that the Quarto document renders without errors and you have pushed all your changes to GitHub, it is to complete the assignment by opening an issue on your wk-03-USERNAME GitHub repo (where USERNAME is your GitHub username).

1.  Navigate to your wk-03-USERNAME GitHub repo (where USERNAME is your GitHub username).
2.  Click on **Issues**, and then **New issue** button.
3.  Write a meaningful title in the **Title** field
4.  Tag the course instructor with using the `@` sign in combination with `larnsce` as the username
5.  Add any questions or comments
